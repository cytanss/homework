// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `Nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def mvnCmd = "mvn -s ./nexus_settings.xml"
  stage('Checkout Source') {
    git url: 'https://github.com/tancheeyong/advdev_homework.git', branch: '40h'
  }

  def groupId    = getGroupIdFromPom("./Nationalparks/pom.xml")
  def artifactId = getArtifactIdFromPom("./Nationalparks/pom.xml")
  def version    = getVersionFromPom("./Nationalparks/pom.xml")

  // Set the tag for the development image: version + build number
  def devTag  = "${version}-${BUILD_NUMBER}"
  // Set the tag for the production image: version
  def prodTag = "${version}"

  // Using Maven build the war file
  // Do not run tests in this step
  stage('Build war') {
    echo "Building version ${version}"
    sh "${mvnCmd} -f ./Nationalparks/pom.xml clean package -DskipTests"
  }

  // Using Maven run the unit tests
  stage('Unit Tests') {
    echo "Running Unit Tests"
    sh "${mvnCmd} -f ./Nationalparks/pom.xml test"
  }

  // Using Maven call SonarQube for Code Analysis
  stage('Code Analysis') {
    echo "Running Code Analysis"
    sh "${mvnCmd} -f ./Nationalparks/pom.xml sonar:sonar -Dsonar.host.url=https://sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
  }

  // Publish the built war file to Nexus
  stage('Publish to Nexus') {
    echo "Publish to Nexus"
    sh "${mvnCmd} -f ./Nationalparks/pom.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
  }

  // Build the OpenShift Image in OpenShift and tag it.
  stage('Build and Tag OpenShift Image') {
    echo "Building OpenShift container image tasks:${devTag}"
    sh "oc start-build nationalparks --follow --from-file=./Nationalparks/target/nationalparks.jar -n ${GUID}-parks-dev" 
    openshiftTag alias: 'false', destStream: 'nationalparks', destTag: devTag, destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'nationalparks', srcTag: 'latest', verbose: 'false'
  }

  // Deploy the built image to the Development Environment.
  stage('Deploy to Dev') {
    echo "Deploying container image to Development Project"
    sh "oc set image dc/nationalparks nationalparks=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks:${devTag} -n ${GUID}-parks-dev"
    openshiftDeploy depCfg: 'nationalparks', namespace: "${GUID}-parks-dev", verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: 'nationalparks', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'nationalparks', verbose: 'false'
  }

  // Run Integration Tests in the Development Environment.
  stage('Integration Tests') {
    echo "Running Integration Tests"
    sleep 30

    sh "curl http://nationalparks-${GUID}-parks-dev.apps.${CLUSTER}/ws/healthz/ | grep -q 'OK'"
    sh "curl http://nationalparks-${GUID}-parks-dev.apps.${CLUSTER}/ws/data/load/ | grep -q 'Items inserted in database: 2740'"
  }

  // Copy Image to Nexus Docker Registry
  stage('Copy Image to Nexus Docker Registry') {
    echo "Copy image to Nexus Docker Registry"
    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/nationalparks:${devTag} docker://nexus-registry-${GUID}-nexus.apps.${CLUSTER}/nationalparks:${devTag}"
      openshiftTag alias: 'false', destStream: 'nationalparks', destTag: prodTag, destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'nationalparks', srcTag: devTag, verbose: 'false'
  }

  // Blue/Green Deployment into Production
  // -------------------------------------
  // Do not activate the new version yet.
  def destApp   = "nationalparks-green"
  def activeApp = "nationalparks-blue"
  def destcfgMap = "Green"

  stage('Blue/Green Production Deployment') {
    echo "Deploying Blue/Green Production"
      activeApp = sh(returnStdout: true, script: "oc get route nationalparks -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
      
      if (activeApp == "nationalparks-green") {
        destApp = "nationalparks-blue"
        destcfgMap = "Blue"
      }
      
      echo "Active Application:      " + activeApp
      echo "Destination Application: " + destApp
      echo "Config Map to be used:   " + destcfgMap
      
      sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks:${prodTag} -n ${GUID}-parks-prod"
      
      sh "oc delete configmap nationalparks-config -n ${GUID}-parks-prod --ignore-not-found=true"
      
      sh "oc create configmap nationalparks-config --from-literal=APPNAME='National Parks (${destcfgMap})' \
                --from-literal=DB_HOST=mongodb \
                --from-literal=DB_PORT=27017 \
                --from-literal=DB_USERNAME=mongodb_user \
                --from-literal=DB_PASSWORD=mongodb_password \
                --from-literal=DB_NAME=mongodb \
                --from-literal=DB_REPLICASET=rs0 \
                -n ${GUID}-parks-prod"
      
      sh "oc set env dc/${destApp} --from=configmap/nationalparks-config -n ${GUID}-parks-prod"
      
      sh "oc expose dc/${destApp} -l type=parksmap-backend --port 8080 -n ${GUID}-parks-prod" 
      
      openshiftDeploy depCfg: destApp, namespace: '${GUID}-parks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
      openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'
  }

  stage('Switch over to new Version') {
    echo "Switching Production application to ${destApp}."
    sh "oc patch route nationalparks -n ${GUID}-parks-prod -p '{\"spec\":{\"to\":{\"name\":\"" + destApp + "\"}}}'"
    sh "oc delete svc ${activeApp} -n ${GUID}-parks-prod"
    sleep 20
    sh "curl http://nationalparks-${GUID}-parks-prod.apps.${CLUSTER}/ws/data/load/ | grep -q 'Items inserted in database: 2740'"
  }

  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
